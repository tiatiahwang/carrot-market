// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int      @id @default(autoincrement())
  phone           String?  @unique
  email           String?  @unique
  name            String
  avatar          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tokens          Token[]
  products        Product[]
  favorites       Favorite[]
  posts           Post[]
  answers         Answer[]
  wondering       Wondering[]
  writtenReviews  Review[] @relation(name: "writtenReviews")
  receivedReviews Review[] @relation(name: "receivedReviews")
  sales           Sale[]
  purchases       Purchase[]
  // record          Record[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int

  @@index([userId])
}

model Product {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          Int
  image           String
  name            String
  price           Float
  description     String   @db.MediumText
  favorites       Favorite[]
  sales           Sale[]
  purchases       Purchase[]
  // record          Record[]

  @@index([userId])
}

model Favorite {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      Int
  productId   Int

  @@index([userId])
  @@index([productId])
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  question    String   @db.MediumText
  latitude    Float?
  longitude   Float?
  answers     Answer[]
  wondering   Wondering[]

  @@index([userId])
}

model Answer {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId      Int
  postId      Int
  answer      String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId      Int
  postId      Int

  @@index([userId])
  @@index([postId])
}

model Review {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  review        String   @db.MediumText
  score         Int
  createdBy     User  @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdFor    User  @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdById   Int
  createdForId  Int

  @@index([createdById])
  @@index([createdForId])
}

model Sale {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      Int
  productId   Int

  @@index([userId])
  @@index([productId])
}

model Purchase {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      Int
  productId   Int

  @@index([userId])
  @@index([productId])
}

// model Record {
//   id          Int      @id @default(autoincrement())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   userId      Int
//   productId   Int
//   kind        Kind

//   @@index([userId])
//   @@index([productId])
// }

// enum Kind {
//   Purchase
//   Sale
//   Fav
// }